{
  "name": "Sophia Light",
  "type": "light",

  "colors": {
    // UI

    // Scrollbars

    // "scrollbarSlider.background": "#191818",

    // Titlebar

    "titleBar.activeBackground": "#fcfcf4",

    // Activity bar

    "activityBar.border": "#303030",
    "activityBar.activeBackground": "#fcfcf4",

    "activityBar.background": "#fcfcf4",
    "activityBar.foreground": "#bebeb1",

    "activityBar.activeBorder": "#FFFF00",

    "activityBarBadge.background": "#FFFF00",
    "activityBarBadge.foreground": "#fcfcf4",

    // Sidebar

    "sideBar.border": "#303030",
    "sideBar.background": "#fcfcf4",
    "sideBar.foreground": "#bebeb1",

    //#region Statusbar

    "statusBar.background": "#fcfcf4",
    "statusBar.border": "#303030",
    "statusBar.foreground": "#4d4d4d",

    // WSL label, remote connection, etc.
    "statusBarItem.remoteBackground": "#fcfcf4",
    "statusBarItem.remoteForeground": "#BBE1CA",

    //#endregion

    // File tree

    "tree.indentGuidesStroke": "#202020",

    // Menu

    "menu.background": "#171717",

    // Terminal

    "terminal.background": "#fcfcf4",

    // Tabs

    // Active
    "tab.activeBackground": "#fcfcf4",
    "tab.activeForeground": "#fcfcf4",
    // Active unfocused
    "tab.unfocusedActiveBackground": "#fcfcf4",
    "tab.unfocusedActiveForeground": "#bebeb1",
    // Inactive
    "tab.inactiveBackground": "#fcfcf4",
    "tab.inactiveForeground": "#bebeb1",
    // Border
    "tab.border": "#fcfcf4",
    "tab.activeBorderTop": "#FFFF00",

    // Editor group

    "editorGroup.border": "#303030",
    "editorGroupHeader.border": "#fcfcf4",
    "editorGroupHeader.noTabsBackground": "#ff0000",
    "editorGroupHeader.tabsBackground": "#fcfcf4",

    // Editor

    "editor.background": "#fcfcf4",
    "editor.foreground": "#777777",

    "editorLineNumber.foreground": "#4d4d4d",

    // Current line
    "editor.lineHighlightBackground": "#ebebe3",
    // "editorRuler.foreground": "#ff0000"
    "editorIndentGuide.background1": "#efeee5",
    "editorIndentGuide.activeBackground1": "#b8b7a9",

    "editorRuler.foreground": "#efeee5",

    // Folds
    "editor.foldBackground": "#0f0f0f7b",

    // Terminal

    "terminal.tab.activeBorder": "#8904e8bc"
  },

  "tokenColors": [
    {
      "scope": "meta.embedded.line",
      "settings": {
        "foreground": "#5a5a5a",
        "fontStyle": ""
      }
    },
    // Effects: function calls, operators, JSX component tags.
    {
      "scope": "meta.function-call entity.name.function, keyword.operator.expression.delete, keyword.operator.logical, keyword.operator.comparison, keyword.operator.expression.extends, keyword.operator.expression.instanceof, keyword.operator.expression.of, keyword.operator.new, support.class.component",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#6a04d1"
      }
    },

    // Control flow: conditions, async/await, return, etc.
    {
      "scope": "keyword.control.export, keyword.control.flow, keyword.control.conditional, keyword.operator.ternary, keyword.control.loop, keyword.control.switch",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#d006bf"
      }
    },

    // Definitions: functions, variables, arguments, imports, etc.
    {
      "scope": "variable.parameter, variable.other.readwrite.alias, meta.definition.function, meta.definition.variable, entity.name.type.class",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        // "foreground": "#BBBFE1",
        // [TODO] Decide if to use a more prominent gray for definitions instead of a color:
        "foreground": "#242424"
      }
    },

    // Make function calls italic
    {
      "scope": "meta.function-call",
      "settings": {
        "fontStyle": "italic"
      }
    },

    // Primitives: strings, booleans, numbers, HTML/JSX tags.
    {
      "scope": "string, support.type.builtin, constant",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#6a8cd5",
        "fontStyle": "bold"
      }
    },

    // Object literals
    {
      "scope": "meta.objectliteral, entity.other.attribute-name",
      "settings": {
        "foreground": "#6a8cd5"
      }
    },

    // // Third priority:

    // - What is read, passed as arguments, etc.
    {
      "scope": "variable.other.readwrite, variable.other.property, support.variable.property, entity.name.tag",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#5a5a5a",
        "fontStyle": ""
      }
    },

    // Support code:
    //
    // - Runtime types: function, const, class, etc.
    // - Namespaces: accessed object properties, TS namespaces
    // - Modifiers: async
    // - Secondary operators: rest, spread, typeof, instanceof, assignment
    // - Import from
    // - JSX text
    {
      "scope": "storage.type, variable.object.property, meta.var.expr, variable.other.constant.object, support.class, storage.modifier, keyword.operator.rest, keyword.operator.spread, keyword.operator.expression.typeof, keyword.operator.expression.instanceof, keyword.operator.assignment, keyword.control.import, keyword.control.from, meta.jsx.children, meta.import keyword.control.as",
      "settings": {
        "foreground": "#5a5a5a",
        "fontStyle": ""
      }
    },

    //#region Types

    // Base types color
    {
      "scope": "meta.interface, keyword.operator.type.annotation, meta.field.declaration, meta.type.declaration, meta.type.annotation, meta.interface, meta.type.annotation entity.name.type.module, meta.namespace.declaration punctuation.terminator, entity.name.type.module",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#608063"
        // "fontStyle": "italic"
      }
    },

    // Type control flow
    {
      "scope": "meta.namespace.declaration keyword.control.export, meta.type.declaration keyword.control.export, meta.interface keyword.control.export, meta.type.declaration keyword.operator.ternary, meta.type.infer keyword.operator.expression.extends, meta.type.declaration storage.modifier, meta.type.parameters storage.modifier, meta.interface keyword.operator.ternary, meta.method.declaration storage.modifier, keyword.control.satisfies",
      "settings": {
        "foreground": "#00904f"
      }
    },

    // Type effects
    {
      "scope": "keyword.operator.type, keyword.operator.expression.infer, meta.indexer.mappedtype.declaration keyword.operator.expression.in, keyword.operator.expression.keyof, meta.interface storage.modifier, meta.type.annotation storage.modifier, keyword.control.as",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        "foreground": "#00958b",
        "fontStyle": ""
      }
    },

    {
      "scope": "entity.name.type.interface, entity.name.type.alias, meta.type.infer entity.name.type, meta.interface variable.parameter, meta.interface variable.object.property, meta.interface entity.name.function",
      "settings": {
        "foreground": "#019918"
      }
    },

    // Accessing
    {
      "scope": "entity.name.type, meta.interface variable.other.readwrite, meta.interface entity.other.inherited-class, meta.interface variable.other.property",
      "settings": {
        "foreground": "#3d9d4b",
        "fontStyle": ""
      }
    },

    // Primitives
    {
      "scope": "support.type.primitive, meta.type.parameters string, meta.type.annotation string, meta.type.annotation support.type.builtin, meta.interface support.type.builtin, meta.type.declaration support.type.builtin, meta.namespace.declaration string, meta.interface constant",
      "settings": {
        "foreground": "#93a27e",
        "fontStyle": "bold"
      }
    },
    // Object properties
    {
      "scope": "meta.field.declaration, meta.object.type variable.object.property, meta.interface meta.objectliteral",
      "settings": {
        "foreground": "#93a27e"
      }
    },
    // Function definitions italic
    {
      "scope": "meta.interface entity.name.function",
      "settings": {
        "fontStyle": "italic"
      }
    },

    // Type support code
    {
      "scope": "meta.type.declaration storage.type, storage.type.interface, storage.type.namespace, meta.field.declaration storage.modifier",
      "settings": {
        "foreground": "#71957a"
      }
    },

    //#endregion

    //#region Comments

    // Comments

    {
      "scope": "comment, comment.block.documentation",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        // "foreground": "#6c6c6c"
        "foreground": "#8b612a"
      }
    },

    {
      "scope": "storage.type.class.jsdoc",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        // "foreground": "#6c6c6c"
        "foreground": "#eb8602"
      }
    },

    {
      "scope": "variable.other.jsdoc",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        // "foreground": "#6c6c6c"
        "foreground": "#ca6d09"
      }
    },

    {
      "scope": "punctuation.definition.comment, punctuation.definition.block.tag.jsdoc",
      "settings": {
        // "foreground": "#5a5a5a" // Placeholder
        // "foreground": "#6c6c6c"
        "foreground": "#55514b"
      }
    },

    //#endregion

    //#region Markdown

    // Headers
    {
      "scope": "markup.heading",
      "settings": {
        "foreground": "#ff8cf5",
        "fontStyle": "bold"
      }
    },

    // Text
    {
      "scope": "meta.paragraph.markdown, punctuation.definition.list.begin.markdown",
      "settings": {
        "foreground": "#242424"
      }
    },

    // Bold
    {
      "scope": "markup.bold",
      "settings": {
        "fontStyle": "bold"
      }
    },

    // Italic
    {
      "scope": "markup.italic",
      "settings": {
        "fontStyle": "italic"
      }
    },

    // Underline
    {
      "scope": "markup.underline",
      "settings": {
        "fontStyle": "underline"
      }
    },

    // Link
    {
      "scope": "string.other.link.title.markdown",
      "settings": {
        "foreground": "#ca94ff",
        "fontStyle": "underline"
      }
    },

    {
      "scope": "constant.other.reference.link.markdown",
      "settings": {
        "fontStyle": "underline"
      }
    },

    // Formatting, link definitions, etc.
    {
      "scope": "meta.link.inline.markdown, meta.link.reference.def.markdown, constant.other.reference.link.markdown, punctuation.definition.raw.markdown, punctuation.definition.bold.markdown, punctuation.definition.italic.markdown",
      "settings": {
        "foreground": "#5a5a5a"
      }
    },

    // Raw
    {
      "scope": "markup.inline.raw.string.markdown",
      "settings": {
        "foreground": "#6a8cd5"
      }
    },

    //#endregion

    //#region JSON

    {
      "scope": "punctuation.support.type.property-name.begin.json, punctuation.support.type.property-name.end.json, punctuation.definition.dictionary.begin.json, punctuation.definition.dictionary.end.json",
      "settings": {
        "foreground": "#777777"
      }
    },

    // Property name
    {
      "scope": "support.type.property-name.json",
      "settings": {
        "foreground": "#242424"
      }
    },

    // Nested property names
    {
      "scope": "meta.structure.dictionary.value.json support.type.property-name.json",
      "settings": {
        "foreground": "#c5c5c5"
      }
    },

    // Reset bold for property names and strings
    {
      "scope": "support.type.property-name.json, string.quoted.double.json",
      "settings": {
        "fontStyle": ""
      }
    },

    //#endregion

    //#region Makefile

    {
      "scope": "source.makefile",
      "settings": {
        "foreground": "#c5c5c5"
      }
    },

    {
      "scope": "entity.name.function.target.makefile, keyword.control.@.makefile",
      "settings": {
        "foreground": "#ff8cf5"
      }
    },

    {
      "scope": "meta.scope.prerequisites.makefile",
      "settings": {
        "foreground": "#ca94ff"
      }
    },

    {
      "scope": "punctuation.separator.key-value.makefile",
      "settings": {
        "foreground": "#777777"
      }
    },

    //#endregion

    {}
  ]
}
