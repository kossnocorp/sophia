{
  "name": "Sophia Dark",
  "type": "dark",

  "colors": {
    // UI

    // Scrollbars

    "scrollbarSlider.background": "#191818",

    // Titlebar

    "titleBar.activeBackground": "#000000",

    // Activity bar

    "activityBar.border": "#0b0e14",
    "activityBar.activeBackground": "#171717",

    "activityBar.background": "#000000",
    "activityBar.foreground": "#bebeb1",

    "activityBar.activeBorder": "#8904e8bc",

    "activityBarBadge.background": "#8904e8bc",
    "activityBarBadge.foreground": "#ffffff",

    // Sidebar

    "sideBar.border": "#0b0e14",
    "sideBar.background": "#000000",
    "sideBar.foreground": "#bebeb1",

    //#region Statusbar

    "statusBar.background": "#000000",
    "statusBar.border": "#0b0e14",
    "statusBar.foreground": "#4d4d4d",

    // WSL label, remote connection, etc.
    "statusBarItem.remoteBackground": "#000000",
    "statusBarItem.remoteForeground": "#BBE1CA",

    //#endregion

    // File tree

    "tree.indentGuidesStroke": "#202020",

    // Menu

    "menu.background": "#171717",

    // Terminal

    "terminal.background": "#000000",

    // Tabs

    // Active
    "tab.activeBackground": "#171717",
    "tab.activeForeground": "#ffffff",
    // Active unfocused
    "tab.unfocusedActiveBackground": "#171717",
    "tab.unfocusedActiveForeground": "#bebeb1",
    // Inactive
    "tab.inactiveBackground": "#000000",
    "tab.inactiveForeground": "#bebeb1",
    // Border
    "tab.border": "#000000",
    "tab.activeBorderTop": "#8904e8bc",

    // Editor group

    "editorGroup.border": "#0b0e14",
    "editorGroupHeader.border": "#000000",
    "editorGroupHeader.noTabsBackground": "#ff0000",
    "editorGroupHeader.tabsBackground": "#000000",

    // Editor

    "editor.background": "#000000",
    "editor.foreground": "#696969",

    "editorLineNumber.foreground": "#4d4d4d",

    // Current line
    "editor.lineHighlightBackground": "#191818",
    // "editorRuler.foreground": "#ff0000"
    "editorIndentGuide.background1": "#202020",
    "editorIndentGuide.activeBackground1": "#4d4d4d",

    "editorRuler.foreground": "#202020",

    // Folds
    "editor.foldBackground": "#0f0f0f7b",

    // Terminal

    "terminal.tab.activeBorder": "#8904e8bc"
  },

  "tokenColors": [
    // Highest priority:

    // Effects
    // - What is called, i.e. function names.
    // - Operators like delete, new, keyof, instanceof etc.
    // - Logical operators !==, &&, etc.
    // - extends, infer, etc.
    //
    // These must be the most prominent colors, above the base color. It should
    // be on par
    {
      "scope": "meta.function-call entity.name.function, keyword.operator.expression.delete, keyword.operator.logical, keyword.operator.comparison, keyword.operator.expression.extends, keyword.operator.expression.instanceof",
      "settings": {
        // "foreground": "#8a8a8a" // Placeholder
        "foreground": "#c890f8"
      }
    },

    // Control flow, i.e. conditions, async/await, return, etc.
    {
      "scope": "keyword.control.export, keyword.control.flow, keyword.control.conditional, keyword.operator.ternary",
      "settings": {
        // "foreground": "#8a8a8a" // Placeholder
        "foreground": "#fb73d0"
      }
    },

    // // Second priority:

    // // - What is assigned, i.e. the variable names, function name, import name, argument name etc.
    // {
    //   "scope": "variable.parameter, variable.other.readwrite.alias, meta.definition.function, meta.definition.variable",
    //   "settings": {
    //     // "foreground": "#8a8a8a" // Placeholder
    //     // "foreground": "#BBBFE1",
    //     // [TODO] Decide if to use a more prominent gray for definitions instead of a color:
    //     "foreground": "#f3f3f3"
    //   }
    // },

    // Make function calls italic
    {
      "scope": "meta.function-call",
      "settings": {
        "fontStyle": "italic"
      }
    },

    // // Primitives: strings, booleans, numbers, primitive types
    // {
    //   "scope": "string, support.type.builtin, support.type.primitive, constant",
    //   "settings": {
    //     // "foreground": "#8a8a8a" // Placeholder
    //     // [TODO] Deside if to use a color:
    //     // "foreground": "#BBE1CA"
    //     // [TODO] Or a style:
    //     "fontStyle": "bold"
    //     // I think this is a better option as it makes them less prominent while still highlighting them
    //   }
    // },

    // // Third priority:

    // // - What is read, passed as arguments, etc.
    // {
    //   "scope": "variable.other.readwrite, variable.other.property, entity.name.type, support.variable.property",
    //   "settings": {
    //     // "foreground": "#8a8a8a" // Placeholder
    //     "foreground": "#c5c5c5",
    //     "fontStyle": ""
    //   }
    // },

    // // Support code:
    // //
    // // - Runtime types: function, const, class, etc.
    // // - Namespaces: accessed object properties, TS namespaces
    // // - Modifiers: async
    // // - Secondary operators: rest, spread, typeof, instanceof, assignment
    // // - Import from
    // {
    //   "scope": "storage.type, variable.object.property, entity.name.type.module, variable.other.object, variable.other.constant.object, meta.object-literal.key, support.class, storage.modifier, keyword.operator.rest, keyword.operator.spread, keyword.operator.expression.typeof, keyword.operator.expression.instanceof, keyword.operator.assignment, keyword.control.import, keyword.control.from",
    //   "settings": {
    //     "foreground": "#8a8a8a"
    //   }
    // },

    // // Fourth priority

    // // Punctuation
    // {
    //   "scope": "punctuation, meta.brace",
    //   "settings": {
    //     "foreground": "#4d4d4d"
    //   }
    // },

    // // Lowest priority

    // Semicolons
    {
      "scope": "punctuation.terminator",
      "settings": {
        "foreground": "#282828"
      }
    },

    //#region Types

    // Base types color
    {
      "scope": "keyword.operator.type.annotation, meta.field.declaration, meta.type.declaration, meta.type.annotation, meta.interface",
      "settings": {
        // "foreground": "#8a8a8a" // Placeholder
        "foreground": "#425f46"
        // "fontStyle": "italic"
      }
    },

    // Type control flow
    {
      "scope": "meta.type.declaration keyword.control.export, meta.interface keyword.control.export, meta.type.declaration keyword.operator.ternary, meta.type.infer keyword.operator.expression.extends, meta.type.declaration storage.modifier",
      "settings": {
        "foreground": "#46f4a6"
      }
    },

    // Type effects
    {
      "scope": "keyword.operator.type, keyword.operator.expression.infer, meta.indexer.mappedtype.declaration keyword.operator.expression.in, keyword.operator.expression.keyof",
      "settings": {
        // "foreground": "#8a8a8a" // Placeholder
        "foreground": "#3aece1"
      }
    },

    // Type semicolons
    {
      "scope": "meta.namespace.declaration punctuation.terminator",
      "settings": {
        "foreground": "#182519"
      }
    },

    //#endregion

    //#region Comments

    // Comments
    {
      "scope": "comment",
      "settings": {
        // "foreground": "#8a8a8a" // Placeholder
        // "foreground": "#6c6c6c"
        "foreground": "#928f74"
      }
    }

    //#endregion
  ]
}
