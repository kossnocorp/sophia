# Top-level/global properties (some dialects allow these outside sections)
root_key=value
root:alt_delim value-with-colon
space delim	value	; GNU-style whitespace-delimited variant

; Comments can begin with ; or #, and may appear inline after values
inline_demo = live # dangerously
other_inline: safe ; trailing comment

; Section headers (basic, quoted names, dotted for ‚Äúnesting‚Äù styles)
[owner]
name = John Doe
organization = Acme Widgets Inc.

[database]
server = 192.0.2.62     ; use IP when DNS fails
port = 143
file = "payroll.dat"

; Dotted section names and quoted subsection names (various dialects)
[project]
name = orchard rental service (with app)

[fruit "Apple"]
trademark issues = foreseeable
Taste = known

[fruit.Date]
taste = novel
Trademark Issues = "truly unlikely"

[fruit "Raspberry"]
anticipated problems  = "logistics (fragile fruit)"
Trademark Issues = \
 possible

[fruit.raspberry.proponents.fred]
date = 2021-11-23, 08:54 +0900
comment = "I like red fruit."

[fruit "Date/proponents/alfred"]
comment: Why,  \
 \
 \
 I would buy dates.
# folding: Is "\\\nn" interpreted as "\\n" or "\n"?
#   Or does "\\" prevent folding?
editor = My name may contain a \\
newline.

; Relative nesting (leading dot) used by some dialects
[section]
domain = example.com

[.subsection]
foo = bar

; Case sensitivity varies: keys and sections may be treated case-insensitively
[CaseStudy]
Key = Value
key = Overridden?

; Duplicate keys/sections behavior differs across parsers
[dupes]
a = 1
A = 2
A = 3  # dupe key; override or error depends on parser

; Value quoting, escapes, and special characters
[escaping]
quoted = "with spaces and = ; # inside"
single_quoted = 'kept literally in some dialects'
backslashes = C:\\Program Files\\App
newline_fold = first line \
 second line
quotes_single_in_double = "includes 'single' quotes"
quotes_double_in_single = 'includes "double" quotes'
no_quote_escapes = "tab\t cr\r nl\n backslash \\ semicolon ; hash # equals = colon :"
unicode_literal = "emoji: üòÄ"

; Inline comments variants
[comments]
foo = bar     # hash inline
baz = qux     ; semicolon inline
# whole-line hash comment
; whole-line semicolon comment

; Global vs group vars (mirroring common usage like Ansible/systemd/Git)
[all:vars]
ansible_user=ubuntu
app_env=production

[servers]
web1 host=198.51.100.11 port=80 env=staging
web[2:3] host=web[2:3].example.com

[servers:vars]
keepalive=true

[servers:children]
edge
core

[edge]
edge1 host=edge.example.com

[core]
core1 host=core.example.com

; Whitespace around delimiters
[spacing]
 left =trim
right= trim
  both  =  trim
	tabs	=	kept?

; Alternate delimiters and space-only delimiter (GNU-ish)
[delims]
colon: used
space only value

; Keys that look like comments but are not (dialect-dependent)
[tricky]
#var = a
var = a       ; inline comment
I like to = live # dangerously

; Windows profile-API-flavored example
[WinProfile]
IconFile=Folder.ico
; The equals sign cannot appear in the key in classic WinAPI

; Systemd/flavored samples (for highlighting, not authoritative semantics)
[Service]
ExecStart=/usr/bin/example --flag=value
Environment="ENV_VAR=quoted value" 'SINGLE=alt'

; freedesktop .desktop-like flavor
[Desktop Entry]
Type=Application
Name=MyApp
Exec="/opt/My App/my-app" --flag

; Git-style config snippet
[user]
	email = user@example.com
	name = Example User

; End of demo
