# Rust

layers:
  runtime:
    base:
      # *use* worker::Request;
      # - meta.use.rust keyword.other.rust

    control:
      # *if* a.len() > b.len() {
      - keyword.control.rust
      #
      - keyword.operator.arrow.fat.rust
      # query.first::<Prompts>(None).await*?*;
      - keyword.operator.question.rust

    effect:
      # Box::*new*(...)
      - meta.function.call.rust entity.name.function.rust

    type:
      # Rust syntax doesn't have designated tokens for impl
      # we I have to use the most generic keyword token.
      - source keyword.other.rust
      # *fn* get_direct(...) -> ...
      - keyword.other.fn.rust

    declare:
      # fn *mutable_reference*() {
      - meta.function.definition.rust entity.name.function.rust
      # use worker::*Request*;
      - meta.use.rust entity.name.type.rust

    detail:
      # [NOTE] Reset predefined keyword.operator.logical as Rust
      # marks a lot of stuff like this *(|*error*|* ...
      - keyword.operator.logical.rust
      #  println!*(*"{error:?}"*)*
      - punctuation.brackets.round.rust
      # match *{* ... *}*
      - punctuation.brackets.curly.rust
      # println!()*;*
      - punctuation.semi.rust
      # fn main() *->* ...
      - keyword.operator.arrow.skinny.rust
      # std*::*sync*::*mpsc*::*channel();
      - keyword.operator.namespace.rust
      # fn name(arg*:* StructName) -> ...
      - keyword.operator.key-value.rust

  memory:
    effect:
      # let r1 = *&*x as *const i32
      - keyword.operator.borrow.and.rust
      # ***y += 5;
      - keyword.operator.dereference.rust
      # struct RefStruct<*'*a> { ...
      - punctuation.definition.lifetime.rust
      # *mut* i32
      - storage.modifier.mut.rust
      # pub fn get_metadata_any<*'a*>(...) ...
      - lifetime: true

  types:
    base:
      # pub fn get_token(req: *Request*) -> *Option<String>*
      - meta.function.definition.rust entity.name.type.rust
      # pub collection_uid: *String*,
      - entity.name.type.rust

    detail:
      # Result*<*Response, Error*>*
      - punctuation.brackets.angle.rust

  macro:
    control:
      # *macro_rules!* println { ... }
      - entity.name.function.macro.rules.rust
      # ... *$*dst:expr ...
      - keyword.operator.macro.dollar.rust
      # ... $*dst*:*expr* ...
      - variable.other.metavariable

    effect:
      # *println!*("Hello, world!");
      - meta.macro.rust
      # #[*serde*(tag = "type")]
      - decorator: true
      # #[*macro_export*]
      - builtinAttribute: true

    declare:
      # macro_rules! *println* { ... }
      - macro:
          - declaration

    detail:
      # #*[*serde(tag = "type")*]*
      - attributeBracket: true
      # ... $dst*:*expr ...
      - meta.macro.metavariable.rust keyword.operator.key-value.rust
